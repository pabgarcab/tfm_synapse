{
	"name": "MergeLandingFilesToSilver",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f3214af9-a41f-4181-92e2-b4b0af08cb41"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# # path of the data lake container (bronze and silver for this example)\r\n",
					"# data_lake_container = 'abfss://etl@datalakefrancepgc.dfs.core.windows.net'\r\n",
					"# # The ingestion folder where your parquet file are located\r\n",
					"# bronze_folder = 'bronze/Landing'\r\n",
					"# # The silver folder where your Delta Tables will be stored\r\n",
					"# silver_folder = 'silver'\r\n",
					"# # The name of the table\r\n",
					"# table_name = 'talla'\r\n",
					"# # The wildcard filter used within the bronze folder to find files\r\n",
					"# source_wildcard = 'talla*.parquet'\r\n",
					"# # A comma separated string of one or more key columns (for the merge)\r\n",
					"# key_columns_str = 'idTalla'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Carga de ficheros parquet Landing sobre tablas Delta capa Silver**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import modules\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import when, lit, current_date, date_format\r\n",
					"#from pyspark.dbutils import DBUtils\r\n",
					"from pyspark.sql import SparkSession\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Prueba::\r\n",
					"\r\n",
					"\r\n",
					"# # Crear SparkSession\r\n",
					"# spark = SparkSession.builder \\\r\n",
					"#     .appName(\"Delta Merge Example\") \\\r\n",
					"#     .config(\"spark.sql.extensions\", \"delta.sql.DeltaSparkSessionExtensions\") \\\r\n",
					"#     .config(\"spark.sql.catalog.spark_catalog\", \"delta.catalog.DeltaCatalog\") \\\r\n",
					"#     .getOrCreate()\r\n",
					"\r\n",
					"# Supongamos que tienes las variables necesarias\r\n",
					"# Fecha actual en formato yyyymmdd\r\n",
					"fecha_delta = date_format(current_date(), 'yyyyMMdd')\r\n",
					"#fecha_delta = '20241008'\r\n",
					"# Convert comma separated string with keys to array\r\n",
					"key_columns = key_columns_str.split(',')\r\n",
					"\r\n",
					"# Convert array with keys to where-clause for merge statement\r\n",
					"conditions_list = [f\"existing.{key}=updates.{key}\" for key in key_columns]\r\n",
					"\r\n",
					"# Determine path of source files from ingest layer\r\n",
					"source_path = data_lake_container + '/' + bronze_folder + '/' + source_wildcard\r\n",
					"\r\n",
					"# Determine path of Delta Lake Table \r\n",
					"delta_table_path = data_lake_container + '/' + silver_folder + '/' + table_name\r\n",
					"\r\n",
					"# Read file(s) in spark data frame\r\n",
					"sdf = spark.read.format('parquet').option(\"recursiveFileLookup\", \"true\").load(source_path)\r\n",
					"\r\n",
					"# Eliminar las columnas que no se desean\r\n",
					"sdf = sdf.drop(\"fechaActualizacion\", \"pipelineID\")\r\n",
					"\r\n",
					"# Check if the Delta Table exists\r\n",
					"if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"    # Read the existing Delta Table\r\n",
					"    delta_table = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"\r\n",
					"    # Get the schema of the existing Delta table\r\n",
					"    existing_columns = delta_table.toDF().columns\r\n",
					"    \r\n",
					"    # AÃ±adir columna fechaDelta al DataFrame\r\n",
					"    sdf = sdf.withColumn(\"fechaDelta\", lit(fecha_delta))\r\n",
					"\r\n",
					"    # Crear el conjunto de actualizaciones excluyendo 'fechaCarga'\r\n",
					"    update_set = {f\"existing.{col}\": f\"updates.{col}\" for col in existing_columns if col != 'fechaCarga'}\r\n",
					"\r\n",
					"    # Merge new data into existing table\r\n",
					"    delta_table.alias(\"existing\").merge(\r\n",
					"        source=sdf.alias(\"updates\"),\r\n",
					"        condition=\" AND \".join(conditions_list)\r\n",
					"    ).whenMatchedUpdate(\r\n",
					"        condition=\" OR \".join([f\"existing.{col} != updates.{col}\" for col in existing_columns if col not in ('fechaCarga', 'fechaDelta')]),\r\n",
					"        set={\r\n",
					"            \"fechaCarga\": \"updates.fechaCarga\",  # Usar fechaCarga del DataFrame\r\n",
					"            \"fechaDelta\": \"updates.fechaDelta\",  # Usar fechaDelta del DataFrame\r\n",
					"            **{f\"existing.{col}\": f\"updates.{col}\" for col in existing_columns if col not in ('fechaCarga', 'fechaDelta')}  # Incluir otros campos\r\n",
					"        }\r\n",
					"    ).whenNotMatchedInsert(\r\n",
					"        values={\r\n",
					"            \"fechaCarga\": \"updates.fechaCarga\",  # Usar fechaCarga del DataFrame\r\n",
					"            \"fechaDelta\": fecha_delta,  # Establecer fechaDelta al insertar\r\n",
					"            **{f\"{col}\": f\"updates.{col}\" for col in existing_columns if col not in ('fechaCarga', 'fechaDelta')}  # Incluir otros campos\r\n",
					"        }\r\n",
					"    ).execute()\r\n",
					"else:\r\n",
					"    # Crear nueva tabla Delta con nuevos datos, incluyendo la columna fechaDelta\r\n",
					"    sdf = sdf.withColumn(\"fechaCarga\", sdf.fechaCarga)  # Mantener fechaCarga del DataFrame\r\n",
					"    sdf = sdf.withColumn(\"fechaDelta\", lit(fecha_delta))  # Establecer fechaDelta al crear la tabla\r\n",
					"    sdf.write.format('delta').save(delta_table_path)\r\n",
					"\r\n",
					"spark.sql(f'CREATE TABLE IF NOT EXISTS Silver.{table_name} USING DELTA LOCATION \\'{delta_table_path}\\'')"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Actualizar CSV Configuracion**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# cuenta =  'datalake1pgc'\r\n",
					"# contendor = 'mdw'\r\n",
					"# archivo = '/bronze/Configuration/ConfiguracionOrigenes.csv'\r\n",
					"\r\n",
					"# #ruta = 'abfss://%s@%s.dfs.core.windows.net/%s' % (contendor, cuenta, archivo)\r\n",
					"# ruta = f'abfss://{contendor}@{cuenta}.dfs.core.windows.net/{archivo}'\r\n",
					"# # Leer CSV\r\n",
					"# #print(ruta)\r\n",
					"# df = spark.read.option(\"header\", \"true\").option(\"delimiter\", \";\").csv(ruta)\r\n",
					"# #Generamos fecha en formato 'yyyyMMdd'\r\n",
					"# fecha_actual = date_format(current_date(), 'yyyy-MM-dd')\r\n",
					"# fecha_actual = '2022-01-17'\r\n",
					"# # Modificar CSV\r\n",
					"# df_modificado = df.withColumn(\r\n",
					"#     \"UpdateDate\",\r\n",
					"#     when(df[\"Filename\"] == table_name, fecha_actual).otherwise(df[\"UpdateDate\"])\r\n",
					"# )\r\n",
					"# # Sobreescrir CSV\r\n",
					"# #df_modificado.coalesce(1).write.mode(\"overwrite\").option(\"header\", True).csv(ruta)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_modificado.coalesce(1).write.mode(\"overwrite\").option(\"header\", True).csv(ruta)\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}