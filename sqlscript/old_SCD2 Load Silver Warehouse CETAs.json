{
	"name": "old_SCD2 Load Silver Warehouse CETAs",
	"properties": {
		"content": {
			"query": "-- CREATE EXTERNAL TABLE staging_scd2 \n-- WITH\n-- (\n-- \tLOCATION = 'gold/SCD/Warehouse', \n-- \tDATA_SOURCE = datalake1pgc,\n-- \tFILE_FORMAT = ParquetFileFormat\n-- ) AS \nWITH current_data AS (\n    -- Seleccionar solo las filas actuales\n    SELECT *\n    FROM SilverlessSTG.[dim].[Warehouse]\n    WHERE isCurrent = 1\n),\n-- Identificar los registros que han cambiado o son nuevos\nchanges AS (\n    SELECT\n        s.idWarehouse,\n        s.warehouse,\n        s.externalCode,\n\t\ts.countryCode,\n\t\ts.country,\n\t\ts.city,\n\t\ts.address,\n\t\ts.description,\n\t\ts.loadDate,\n\t\ts.deltaDate,\n        c.idWarehouse AS current_idWarehouse,\n        c.warehouse AS current_warehous,\n        c.externalCode AS current_externalCode,\n\t\tc.countryCode AS current_countryCode,\n\t\tc.country AS current_country,\n\t\tc.city AS current_city,\n\t\tc.address AS current_address,\n\t\tc.description AS current_description,\n\t\tc.loadDate AS current_loadDate,\n\t\tc.deltaDate AS current_deltaDate\n    FROM etl.vw_dim_Warehouse s\n    LEFT JOIN current_data c\n        ON s.idWarehouse = c.idWarehouse\n) --select * from CHANGES\n-- CTAS para generar las versiones antiguas (historical records)\n\n,final AS (\nSELECT\n\tc.idWarehouse,\n\tc.warehouse,\n\tc.externalCode,\n\tc.countryCode,\n\tc.country,\n\tc.city,\n\tc.address,\n\tc.description,\n\tc.loadDate,\n\tc.deltaDate,  \n\tc.fromDate,\n    GETDATE() AS toDate, -- Marcar la fecha de fin para las versiones anteriores\n    0 AS isCurrent -- Ya no son actuales\nFROM current_data c\nJOIN changes chg\n    ON c.idWarehouse = chg.idWarehouse\n    -- Identificar cuando cambió algún valor\n    WHERE (c.warehouse != chg.warehouse OR c.externalCode != chg.externalCode OR c.countryCode != chg.countryCode OR c.country != chg.country\n\t\t\tOR c.city != chg.city OR c.address != chg.address OR c.description != chg.description)\n\nUNION ALL\n\n-- Insertar las nuevas versiones o los registros que no existían antes\nSELECT\n\tchg.idWarehouse,\n\tchg.warehouse,\n\tchg.externalCode,\n\tchg.countryCode,\n\tchg.country,\n\tchg.city,\n\tchg.address,\n\tchg.description,\n\tchg.loadDate,\n\tchg.deltaDate,\n    GETDATE() AS fromDate,\n    '9999-12-31' AS toDate, -- Para los registros actuales, se deja abierto\n    1 AS isCurrent\nFROM changes chg\nLEFT JOIN current_data c\n    ON chg.idWarehouse = c.idWarehouse\nWHERE c.idWarehouse IS NULL OR   (c.warehouse != chg.warehouse OR c.externalCode != chg.externalCode OR c.countryCode != chg.countryCode OR c.country != chg.country\n\t\t\tOR c.city != chg.city OR c.address != chg.address OR c.description != chg.description)\n\n\nUNION ALL\n\n-- Insertar las filas que no han cambiado (mantenerlas con isCurrent = 1)\nSELECT\n\t--ROW_NUMBER () OVER (ORDER BY c.idWarehouse, fromDate) idSkWarehouse,\n    c.idWarehouse,\n    c.warehouse,\n    c.externalCode,\n    c.countryCode,\n    c.country,\n    c.city,\n    c.address,\n    c.description,\n    c.loadDate,\n    c.deltaDate,\n    c.fromDate,\n    c.toDate, -- Mantener su toDate abierto (9999-12-31)\n    c.isCurrent -- Mantener isCurrent = 1\nFROM current_data c\nJOIN changes chg\n    ON c.idWarehouse = chg.idWarehouse\n-- Seleccionar solo las filas que no han cambiado\nWHERE (c.warehouse = chg.warehouse AND c.externalCode = chg.externalCode AND c.countryCode = chg.countryCode AND c.country = chg.country\n        AND c.city = chg.city AND c.address = chg.address AND c.description = chg.description)\n)\n\nselect ROW_NUMBER () OVER (ORDER BY idWarehouse,fromDate desc) idSkWarehouse,\n* from final c;",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "SilverlessSTG",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}